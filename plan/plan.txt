my behavior tree implementation to fill in gaps and issues I found with other implementations

Notes:
-if a node emits an editor warning in _get_configuration_warnings, don't repeat the warning at runtime somewhere else
-avoid asserting, prefer throwing warnings and accounting for errors instead of crashing
-allow user to add non BT nodes under a branch, and just ignore them
-mark major and minor versions with git tags
-color palette: main af9dd9, seconday 4a4563
-icon sprite name should match scene file name
-debugger/game communication is handled by the root tree node

Resources:
https://nodecanvas.paradoxnotion.com/documentation/?section=bt-nodes-reference
https://www.gamedeveloper.com/programming/behavior-trees-for-ai-how-they-work
https://github.com/bitbrain/beehave
https://github.com/draghan/behavior_tree
https://dev.epicgames.com/documentation/en-us/unreal-engine/behavior-tree-in-unreal-engine---quick-start-guide?application_version=5.2
https://www.behaviortree.dev/docs/
https://www.gameaipro.com/GameAIPro/GameAIPro_Chapter06_The_Behavior_Tree_Starter_Kit.pdf
https://github.com/aigamedev/btsk

Stage 2:
[X] make into plugin

[X] document all nodes
[X] document all exports
[] document enums if an export variable uses them (hover over composite.conditional_abort for an example)

[X] better caching and navigating of tree

[] follow official style guide so it's easier for others to contribute
https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_styleguide.html#doc-gdscript-styleguide

nodes:
[X]-reactive sequence & selector
[X]-simple parallel
[X]-rename throttle into cooldown
-event listener that can interrupt low priority branches

-rename services to something more clear like observers

plugin for visualizing tree at run-time
[X] -node graph, allows browsing individual trees
[X] -can check global blackboard. while blackboard is open in debugger update data regularly
[..] -can place breakpoints on a specific node in the graph
[..] -can force tree to run a specific node
[X] -use node name and description for the graph
[] -custom nodes can add their custom data to the graph

unit tests:
-all node types and their expected behavior
-blackboard
-conditional aborts
-forcing a path from any node to any other
-pausing/unpausing
-changing tree nodes at run-time
-practical example

[X]support sub-trees and shared/multiple blackboards

[-] dynamic tree, support run-time modifications

additional nodes (in their own "extension" folder so we don't bloat the main folder):
-play animation (optional wait for finish)
-play sound (optional wait for finish)
-agent look at (2d/3d) (requires character2d)
-agent go to (2d/3d) (requires nav agent and nav mesh)
-play particles (optional wait for finish)
-instantiate object (pos, rot, scale)

Stage 3:
documentations
examples (use my space game as example)

[..] icons
asset lib setup

Future:
make into C++ module
translation
multiplayer support